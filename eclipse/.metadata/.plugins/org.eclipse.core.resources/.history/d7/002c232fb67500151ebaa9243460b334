/*
 * Decompiled with CFR 0_102.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockLeaves
 *  net.minecraft.block.BlockSapling
 *  net.minecraft.init.Blocks
 *  net.minecraft.world.IBlockAccess
 *  net.minecraft.world.World
 *  net.minecraft.world.gen.feature.WorldGenAbstractTree
 *  net.minecraftforge.common.IPlantable
 *  net.minecraftforge.common.util.ForgeDirection
 */
package com.pam.harvestcraft;

import java.util.Random;
import net.minecraft.block.Block;
import net.minecraft.block.BlockLeaves;
import net.minecraft.block.BlockSapling;
import net.minecraft.init.Blocks;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;
import net.minecraftforge.common.IPlantable;
import net.minecraftforge.common.util.ForgeDirection;

public class WorldGenPamFruitTree
extends WorldGenAbstractTree {
    private final int minTreeHeight;
    private final int metaWood;
    private final int metaLeaves;
    private final Block fruitType;

    public WorldGenPamFruitTree(boolean par1, int par2, int par3, int par4, Block par5) {
        super(par1);
        this.minTreeHeight = par2;
        this.metaWood = par3;
        this.metaLeaves = par4;
        this.fruitType = par5;
    }

    public boolean func_76484_a(World par1World, Random par2Random, int par3, int par4, int par5) {
        int l = par2Random.nextInt(3) + this.minTreeHeight;
        boolean flag = true;
        if (par4 >= 1 && par4 + l + 1 <= 256) {
            int b0;
            int k1;
            Block block;
            for (int i1 = par4; i1 <= par4 + 1 + l; ++i1) {
                b0 = 1;
                if (i1 == par4) {
                    b0 = 0;
                }
                if (i1 >= par4 + 1 + l - 2) {
                    b0 = 2;
                }
                for (int j1 = par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
                    for (k1 = par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
                        if (i1 >= 0 && i1 < 256) {
                            block = par1World.func_147439_a(j1, i1, k1);
                            if (this.isReplaceable(par1World, j1, i1, k1)) continue;
                            flag = false;
                            continue;
                        }
                        flag = false;
                    }
                }
            }
            if (!flag) {
                return false;
            }
            Block block2 = par1World.func_147439_a(par3, par4 - 1, par5);
            boolean isSoil = block2.canSustainPlant((IBlockAccess)par1World, par3, par4 - 1, par5, ForgeDirection.UP, (IPlantable)((BlockSapling)Blocks.field_150345_g));
            if (isSoil && par4 < 256 - l - 1) {
                block2.onPlantGrow(par1World, par3, par4 - 1, par5, par3, par4, par5);
                b0 = 3;
                int b1 = 0;
                for (k1 = par4 - b0 + l; k1 <= par4 + l; ++k1) {
                    int i3 = k1 - (par4 + l);
                    int l1 = b1 + 1 - i3 / 2;
                    for (int i2 = par3 - l1; i2 <= par3 + l1; ++i2) {
                        int j2 = i2 - par3;
                        for (int k2 = par5 - l1; k2 <= par5 + l1; ++k2) {
                            Block block1;
                            int l2 = k2 - par5;
                            if (Math.abs(j2) == l1 && Math.abs(l2) == l1 && (par2Random.nextInt(2) == 0 || i3 == 0) || !(block1 = par1World.func_147439_a(i2, k1, k2)).isAir((IBlockAccess)par1World, i2, k1, k2) && !block1.isLeaves((IBlockAccess)par1World, i2, k1, k2)) continue;
                            this.func_150516_a(par1World, i2, k1, k2, (Block)Blocks.field_150362_t, this.metaLeaves);
                            if (par1World.func_147439_a(i2, k1 - 1, k2) != Blocks.field_150350_a || par1World.func_147439_a(i2, k1 - 2, k2) != Blocks.field_150350_a || k1 <= 2 || par2Random.nextInt(4) != 0) continue;
                            par1World.func_147465_d(i2, k1 - 1, k2, this.fruitType, 0, 2);
                        }
                    }
                }
                for (k1 = 0; k1 < l; ++k1) {
                    block = par1World.func_147439_a(par3, par4 + k1, par5);
                    if (!block.isAir((IBlockAccess)par1World, par3, par4 + k1, par5) && !block.isLeaves((IBlockAccess)par1World, par3, par4 + k1, par5) && block != this.fruitType) continue;
                    this.func_150516_a(par1World, par3, par4 + k1, par5, Blocks.field_150364_r, this.metaWood);
                }
                return true;
            }
            return false;
        }
        return false;
    }
}

