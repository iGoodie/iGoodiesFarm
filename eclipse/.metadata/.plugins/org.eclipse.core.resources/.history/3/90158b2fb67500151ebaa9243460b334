/*
 * Decompiled with CFR 0_102.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockGrass
 *  net.minecraft.block.BlockLeaves
 *  net.minecraft.init.Blocks
 *  net.minecraft.world.IBlockAccess
 *  net.minecraft.world.World
 *  net.minecraft.world.gen.feature.WorldGenAbstractTree
 */
package com.pam.harvestcraft;

import java.util.Random;
import net.minecraft.block.Block;
import net.minecraft.block.BlockGrass;
import net.minecraft.block.BlockLeaves;
import net.minecraft.init.Blocks;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;

public class WorldGenPamFruitPalmTree
extends WorldGenAbstractTree {
    private final int minTreeHeight;
    private final int metaWood;
    private final int metaLeaves;
    private final Block fruitType;

    public WorldGenPamFruitPalmTree(boolean par1, int par2, int par3, int par4, Block par5) {
        super(par1);
        this.minTreeHeight = par2;
        this.metaWood = par3;
        this.metaLeaves = par4;
        this.fruitType = par5;
    }

    public boolean func_76484_a(World par1World, Random par2Random, int x, int y, int z) {
        int treeHeight = par2Random.nextInt(2) + this.minTreeHeight;
        boolean flag = true;
        if (y >= 1 && y + treeHeight + 1 <= 256) {
            for (int i1 = y; i1 <= y + 1 + treeHeight; ++i1) {
                int b0 = 1;
                if (i1 == y) {
                    b0 = 0;
                }
                if (i1 >= y + 1 + treeHeight - 2) {
                    b0 = 2;
                }
                for (int l1 = x - b0; l1 <= x + b0 && flag; ++l1) {
                    for (int j1 = x - b0; j1 <= x + b0 && flag; ++j1) {
                        if (i1 >= 0 && i1 < 256) {
                            Block k1 = par1World.func_147439_a(l1, i1, j1);
                            if (par1World.func_147437_c(l1, i1, j1) || k1.isLeaves((IBlockAccess)par1World, l1, i1, j1) || k1 == Blocks.field_150349_c || k1 == Blocks.field_150346_d || k1.isWood((IBlockAccess)par1World, l1, i1, j1)) continue;
                            flag = false;
                            continue;
                        }
                        flag = false;
                    }
                }
            }
            if (!flag) {
                return false;
            }
            Block j11 = par1World.func_147439_a(x, y - 1, z);
            if (j11 != Blocks.field_150349_c && j11 != Blocks.field_150346_d || y >= 256 - treeHeight - 1) {
                return false;
            }
            par1World.func_147449_b(x, y - 1, z, Blocks.field_150346_d);
            this.func_150516_a(par1World, x, y + treeHeight + 2, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z, Blocks.field_150364_r, this.metaWood);
            this.func_150516_a(par1World, x, y + treeHeight, z, Blocks.field_150364_r, this.metaWood);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z + 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight, z + 1, this.fruitType, 0);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z + 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z + 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight, z + 4, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 1, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 1, y + treeHeight, z, this.fruitType, 0);
            this.func_150516_a(par1World, x + 2, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 3, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 4, y + treeHeight, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z - 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight, z - 1, this.fruitType, 0);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z - 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight + 1, z - 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x, y + treeHeight, z - 4, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 1, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 1, y + treeHeight, z, this.fruitType, 0);
            this.func_150516_a(par1World, x - 2, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 3, y + treeHeight + 1, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 4, y + treeHeight, z, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 1, y + treeHeight + 1, z - 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 1, y + treeHeight + 1, z + 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 1, y + treeHeight + 1, z - 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 1, y + treeHeight + 1, z + 1, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 2, y + treeHeight + 1, z + 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 2, y + treeHeight + 1, z - 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 2, y + treeHeight + 1, z + 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 2, y + treeHeight + 1, z - 2, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 3, y + treeHeight, z + 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x + 3, y + treeHeight, z - 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 3, y + treeHeight, z + 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            this.func_150516_a(par1World, x - 3, y + treeHeight, z - 3, (Block)Blocks.field_150362_t, this.metaLeaves);
            for (int l1 = 0; l1 < treeHeight; ++l1) {
                Block block = par1World.func_147439_a(x, y + l1, z);
                if (!block.isAir((IBlockAccess)par1World, x, y + l1, z) && !block.isLeaves((IBlockAccess)par1World, x, y + l1, z) && block != this.fruitType) continue;
                this.func_150516_a(par1World, x, y + l1, z, Blocks.field_150364_r, this.metaWood);
            }
            return true;
        }
        return true;
    }
}

