/*
 * Decompiled with CFR 0_102.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockLiquid
 *  net.minecraft.entity.player.EntityPlayer
 *  net.minecraft.init.Items
 *  net.minecraft.inventory.IInventory
 *  net.minecraft.item.Item
 *  net.minecraft.item.ItemStack
 *  net.minecraft.nbt.NBTBase
 *  net.minecraft.nbt.NBTTagCompound
 *  net.minecraft.nbt.NBTTagList
 *  net.minecraft.network.NetworkManager
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.server.S35PacketUpdateTileEntity
 *  net.minecraft.tileentity.TileEntity
 *  net.minecraft.world.World
 */
package com.pam.harvestcraft;

import com.pam.harvestcraft.BlockRegistry;
import com.pam.harvestcraft.ItemRegistry;
import java.util.Random;
import net.minecraft.block.Block;
import net.minecraft.block.BlockLiquid;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;

public class TileEntityPamFishTrap
extends TileEntity
implements IInventory {
    private ItemStack[] inventory = new ItemStack[19];
    public int runTime = 0;
    public int currentBeeRunTime = 0;
    public int produceTime = 0;

    public int func_70302_i_() {
        return this.inventory.length;
    }

    public ItemStack func_70301_a(int slot) {
        return this.inventory[slot];
    }

    public ItemStack func_70298_a(int slot, int amount) {
        if (this.inventory[slot] == null) {
            this.func_70299_a(slot, null);
            return null;
        }
        if (this.inventory[slot].field_77994_a <= amount) {
            ItemStack stack = this.inventory[slot];
            this.func_70299_a(slot, null);
            return stack;
        }
        ItemStack stack = this.inventory[slot].func_77979_a(amount);
        if (this.inventory[slot].field_77994_a <= 0) {
            this.func_70299_a(slot, null);
        }
        this.func_70296_d();
        return stack;
    }

    public void func_70299_a(int slot, ItemStack stack) {
        this.inventory[slot] = stack;
        if (stack != null && stack.field_77994_a > this.func_70297_j_()) {
            stack.field_77994_a = this.func_70297_j_();
        }
    }

    public String getInvName() {
        return "Apiary";
    }

    public void func_145839_a(NBTTagCompound nbt) {
        super.func_145839_a(nbt);
        NBTTagList invTag = nbt.func_150295_c("Items", 10);
        this.inventory = new ItemStack[this.func_70302_i_()];
        for (int i = 0; i < invTag.func_74745_c(); ++i) {
            NBTTagCompound stackTag = invTag.func_150305_b(i);
            byte slot = stackTag.func_74771_c("Slot");
            if (slot < 0 || slot >= this.inventory.length) continue;
            this.inventory[slot] = ItemStack.func_77949_a((NBTTagCompound)stackTag);
        }
        this.runTime = nbt.func_74765_d("RunTime");
        this.produceTime = nbt.func_74765_d("ProduceTime");
        this.currentBeeRunTime = this.getRunTime(this.inventory[1]);
    }

    public void func_145841_b(NBTTagCompound nbt) {
        super.func_145841_b(nbt);
        nbt.func_74777_a("RunTime", (short)this.runTime);
        nbt.func_74777_a("ProduceTime", (short)this.produceTime);
        NBTTagList intTag = new NBTTagList();
        for (int i = 0; i < this.inventory.length; ++i) {
            if (this.inventory[i] == null) continue;
            NBTTagCompound stackTag = new NBTTagCompound();
            stackTag.func_74774_a("Slot", (byte)i);
            this.inventory[i].func_77955_b(stackTag);
            intTag.func_74742_a((NBTBase)stackTag);
        }
        nbt.func_74782_a("Items", (NBTBase)intTag);
    }

    public int func_70297_j_() {
        return 64;
    }

    public int getRunTime() {
        int radius = 2;
        int speed = 3500;
        World world = this.field_145850_b;
        int varX = this.field_145851_c;
        int varY = this.field_145848_d;
        int varZ = this.field_145849_e;
        for (int offsetX = - radius; offsetX <= radius; ++offsetX) {
            for (int offsetZ = - radius; offsetZ <= radius; ++offsetZ) {
                if (offsetX * offsetX + offsetZ * offsetZ > radius * radius || offsetX == - radius - 1 && offsetZ == - radius - 1 || offsetX == radius - 1 && offsetZ == radius - 1 || offsetX == radius - 1 && offsetZ == - radius - 1 || offsetX == - radius - 1 && offsetZ == radius - 1) continue;
                Block blockAtCoords = world.func_147439_a(varX + offsetX, varY, varZ + offsetZ);
                if (blockAtCoords instanceof BlockLiquid) {
                    speed = (int)((double)speed * 0.95);
                }
                if (world.func_147439_a(varX + offsetX, varY, varZ + offsetZ) != BlockRegistry.pamfishTrap) continue;
                speed = (int)((double)speed / 0.85);
            }
        }
        return speed;
    }

    public int countFlowers() {
        int radius = 2;
        int count = 0;
        World world = this.field_145850_b;
        int varX = this.field_145851_c;
        int varY = this.field_145848_d;
        int varZ = this.field_145849_e;
        for (int offsetX = - radius; offsetX <= radius; ++offsetX) {
            for (int offsetZ = - radius; offsetZ <= radius; ++offsetZ) {
                Block blockAtCoords;
                if (offsetX * offsetX + offsetZ * offsetZ > radius * radius || offsetX == - radius - 1 && offsetZ == - radius - 1 || offsetX == radius - 1 && offsetZ == radius - 1 || offsetX == radius - 1 && offsetZ == - radius - 1 || offsetX == - radius - 1 && offsetZ == radius - 1 || !((blockAtCoords = world.func_147439_a(varX + offsetX, varY, varZ + offsetZ)) instanceof BlockLiquid)) continue;
                ++count;
            }
        }
        return count;
    }

    public void func_145845_h() {
        boolean isRunning = this.runTime > 0;
        boolean needsUpdate = false;
        if (isRunning) {
            --this.runTime;
        }
        ItemStack queenBee = this.inventory[18];
        if (!this.field_145850_b.field_72995_K) {
            if (this.runTime == 0 && this.canRun()) {
                this.currentBeeRunTime = this.runTime = this.getRunTime(queenBee);
                if (this.runTime > 0) {
                    needsUpdate = true;
                    if (queenBee != null) {
                        if (queenBee.func_77973_b().func_77668_q() != null) {
                            queenBee = new ItemStack(queenBee.func_77973_b().func_77664_n());
                        } else {
                            queenBee.field_77994_a-=0;
                        }
                        if (queenBee.field_77994_a == 0) {
                            queenBee = null;
                        }
                    }
                }
            }
            if (this.canRun()) {
                ++this.produceTime;
                if ((double)this.produceTime >= Math.floor(this.getRunTime())) {
                    this.produceTime = 0;
                    this.run();
                    needsUpdate = true;
                }
            } else {
                this.produceTime = 0;
            }
            if (isRunning != this.runTime > 0) {
                needsUpdate = true;
            }
        }
        if (needsUpdate) {
            this.func_70296_d();
            this.field_145850_b.func_147471_g(this.field_145851_c, this.field_145848_d, this.field_145849_e);
        }
    }

    private boolean canRun() {
        if (this.inventory[18] != null) {
            if (this.inventory[18].func_77973_b() == ItemRegistry.fishtrapbaitItem && this.countFlowers() >= 5) {
                return true;
            }
        } else {
            return false;
        }
        return false;
    }

    public ItemStack getComb() {
        Random rnd = new Random();
        if (this.inventory[18] != null) {
            int rndnum;
            if (ItemRegistry.enableharvestcraftfish) {
                rndnum = rnd.nextInt(32);
                switch (rndnum) {
                    case 0: {
                        return new ItemStack(Items.field_151115_aP, 1, 0);
                    }
                    case 1: {
                        return new ItemStack(Items.field_151115_aP, 1, 1);
                    }
                    case 2: {
                        return new ItemStack(Items.field_151115_aP, 1, 2);
                    }
                    case 3: {
                        return new ItemStack(Items.field_151115_aP, 1, 3);
                    }
                    case 4: {
                        return new ItemStack(ItemRegistry.anchovyrawItem, 1, 0);
                    }
                    case 5: {
                        return new ItemStack(ItemRegistry.bassrawItem, 1, 0);
                    }
                    case 6: {
                        return new ItemStack(ItemRegistry.carprawItem, 1, 0);
                    }
                    case 7: {
                        return new ItemStack(ItemRegistry.catfishrawItem, 1, 0);
                    }
                    case 8: {
                        return new ItemStack(ItemRegistry.charrrawItem, 1, 0);
                    }
                    case 9: {
                        return new ItemStack(ItemRegistry.clamrawItem, 1, 0);
                    }
                    case 10: {
                        return new ItemStack(ItemRegistry.crabrawItem, 1, 0);
                    }
                    case 11: {
                        return new ItemStack(ItemRegistry.crayfishrawItem, 1, 0);
                    }
                    case 12: {
                        return new ItemStack(ItemRegistry.eelrawItem, 1, 0);
                    }
                    case 13: {
                        return new ItemStack(ItemRegistry.frograwItem, 1, 0);
                    }
                    case 14: {
                        return new ItemStack(ItemRegistry.grouperrawItem, 1, 0);
                    }
                    case 15: {
                        return new ItemStack(ItemRegistry.herringrawItem, 1, 0);
                    }
                    case 16: {
                        return new ItemStack(ItemRegistry.jellyfishrawItem, 1, 0);
                    }
                    case 17: {
                        return new ItemStack(ItemRegistry.mudfishrawItem, 1, 0);
                    }
                    case 18: {
                        return new ItemStack(ItemRegistry.octopusrawItem, 1, 0);
                    }
                    case 19: {
                        return new ItemStack(ItemRegistry.perchrawItem, 1, 0);
                    }
                    case 20: {
                        return new ItemStack(ItemRegistry.scalloprawItem, 1, 0);
                    }
                    case 21: {
                        return new ItemStack(ItemRegistry.shrimprawItem, 1, 0);
                    }
                    case 22: {
                        return new ItemStack(ItemRegistry.snailrawItem, 1, 0);
                    }
                    case 23: {
                        return new ItemStack(ItemRegistry.snapperrawItem, 1, 0);
                    }
                    case 24: {
                        return new ItemStack(ItemRegistry.tilapiarawItem, 1, 0);
                    }
                    case 25: {
                        return new ItemStack(ItemRegistry.troutrawItem, 1, 0);
                    }
                    case 26: {
                        return new ItemStack(ItemRegistry.tunarawItem, 1, 0);
                    }
                    case 27: {
                        return new ItemStack(ItemRegistry.turtlerawItem, 1, 0);
                    }
                    case 28: {
                        return new ItemStack(ItemRegistry.walleyerawItem, 1, 0);
                    }
                    case 29: {
                        return new ItemStack(Items.field_151115_aP, 1, 0);
                    }
                    case 30: {
                        return new ItemStack(Items.field_151115_aP, 1, 0);
                    }
                    case 31: {
                        return new ItemStack(ItemRegistry.greenheartfishItem, 1, 0);
                    }
                }
            }
            rndnum = rnd.nextInt(11);
            switch (rndnum) {
                case 0: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 1: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 2: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 3: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 4: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 5: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 6: {
                    return new ItemStack(Items.field_151115_aP, 1, 0);
                }
                case 7: {
                    return new ItemStack(Items.field_151115_aP, 1, 1);
                }
                case 8: {
                    return new ItemStack(Items.field_151115_aP, 1, 1);
                }
                case 9: {
                    return new ItemStack(Items.field_151115_aP, 1, 2);
                }
                case 10: {
                    return new ItemStack(Items.field_151115_aP, 1, 3);
                }
            }
        }
        return null;
    }

    public void run() {
        ItemStack itemProduced = this.getComb();
        for (int i = 0; i < 18; ++i) {
            if (this.inventory[i] != null) continue;
            this.func_70298_a(18, 1);
            this.inventory[i] = itemProduced.func_77946_l();
            break;
        }
    }

    int getRunTime(ItemStack stack) {
        if (stack == null) {
            return 0;
        }
        if (stack.func_77973_b() == ItemRegistry.fishtrapbaitItem) {
            return 3200;
        }
        return 0;
    }

    public boolean func_70300_a(EntityPlayer player) {
        if (this.field_145850_b.func_147438_o(this.field_145851_c, this.field_145848_d, this.field_145849_e) != this) {
            return false;
        }
        return player.func_70092_e((double)this.field_145851_c + 0.5, (double)this.field_145848_d + 0.5, (double)this.field_145849_e + 0.5) <= 64.0;
    }

    public void openChest() {
    }

    public void closeChest() {
    }

    public ItemStack func_70304_b(int slot) {
        return null;
    }

    public boolean isInvNameLocalized() {
        return false;
    }

    public boolean isStackValidForSlot(int slot, ItemStack stack) {
        return false;
    }

    public boolean func_94041_b(int slot, ItemStack stack) {
        return false;
    }

    public String func_145825_b() {
        return null;
    }

    public boolean func_145818_k_() {
        return false;
    }

    public void func_70295_k_() {
    }

    public Packet func_145844_m() {
        NBTTagCompound tag = new NBTTagCompound();
        this.func_145841_b(tag);
        return new S35PacketUpdateTileEntity(this.field_145851_c, this.field_145848_d, this.field_145849_e, 1, tag);
    }

    public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity packet) {
        this.func_145839_a(packet.func_148857_g());
    }

    public void func_70305_f() {
    }
}

